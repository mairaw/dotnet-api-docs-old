<Type Name="ImportConventionBuilder" FullName="System.Composition.Convention.ImportConventionBuilder">
  <TypeSignature Language="C#" Value="public sealed class ImportConventionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImportConventionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.ImportConventionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Configures an import associated with a part.</summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMetadataConstraint">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AddMetadataConstraint (string name, Func&lt;Type,object&gt; getConstraintValueFromPartType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AddMetadataConstraint(string name, class System.Func`2&lt;class System.Type, object&gt; getConstraintValueFromPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AddMetadataConstraint(System.String,System.Func{System.Type,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="getConstraintValueFromPartType" Type="System.Func&lt;System.Type,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the metadata item to be constrained.</param>
        <param name="getConstraintValueFromPartType">A function that calculates the constraint value to match the specified type.</param>
        <summary>Adds an import constraint.</summary>
        <returns>An import builder containing the constraint that allows for further configuration.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMetadataConstraint">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AddMetadataConstraint (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AddMetadataConstraint(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AddMetadataConstraint(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the metadata item to be constrained.</param>
        <param name="value">The constraint value to match the specified name.</param>
        <summary>Adds an import constraint.</summary>
        <returns>An import builder containing the metadata constraint that allows for further import configuration.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDefault">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AllowDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AllowDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AllowDefault" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allows the import to receive the default value for its type if the contract cannot be supplied by another part.</summary>
        <returns>An import builder that allows default values and can be further configured.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AsContractName">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AsContractName (Func&lt;Type,string&gt; getContractNameFromPartType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AsContractName(class System.Func`2&lt;class System.Type, string&gt; getContractNameFromPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AsContractName(System.Func{System.Type,System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getContractNameFromPartType" Type="System.Func&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="getContractNameFromPartType">A function that retrieves the contract name from the specified part type.</param>
        <summary>Specifies the contract name for the import.</summary>
        <returns>An import builder containing the contract name that allows for further import configuration.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AsContractName">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AsContractName (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AsContractName(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AsContractName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractName">The contract name.</param>
        <summary>Specifies the contract name for the import.</summary>
        <returns>An import builder containing the contract name that allows for further import configuration.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMany">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AsMany ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AsMany() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AsMany" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Configures the import to receive all exports of the contract.</summary>
        <returns>An import builder that is configured to receive all exports of the contract, and allows for further import configuration.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMany">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.ImportConventionBuilder AsMany (bool isMany);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.ImportConventionBuilder AsMany(bool isMany) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ImportConventionBuilder.AsMany(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.ImportConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isMany" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isMany">Indicates whether the import will receive all values from the export.</param>
        <summary>Configures a flag in the import that indicates whether it will receive all exports of the contract.</summary>
        <returns>An import builder that allows further import configuration.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
