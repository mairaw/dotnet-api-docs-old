<Type Name="IDtcTransaction" FullName="System.Transactions.IDtcTransaction">
  <TypeSignature Language="C#" Value="public interface IDtcTransaction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDtcTransaction" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IDtcTransaction" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0fb15084-af41-11ce-bd2b-204c4f4f5020")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes a DTC transaction.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should not implement this interface, as it is used only by the <xref:System.Transactions.TransactionInterop> class internally to represent the unmanaged version of the <xref:System.EnterpriseServices.ITransaction> interface of the <xref:System.EnterpriseServices> namespace.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (IntPtr reason, int retaining, int async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abort(native int reason, int32 retaining, int32 async) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.IntPtr" />
        <Parameter Name="retaining" Type="System.Int32" />
        <Parameter Name="async" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reason">An optional <see cref="System.EnterpriseServices.BOID" /> that indicates why the transaction is being aborted. This parameter can be <see langword="null" />, indicating that no reason for the abort is provided.</param>
        <param name="retaining">This value must be <see langword="false" />.</param>
        <param name="async">When <c>async</c> is <see langword="true" />, an asynchronous abort is performed and the caller must use <see langword="ITransactionOutcomeEvents" /> to learn about the outcome of the transaction.</param>
        <summary>Aborts a transaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should not implement any method of this interface, as it is used only by the <xref:System.Transactions.TransactionInterop> class internally to represent the unmanaged version of the <xref:System.EnterpriseServices.ITransaction> interface of the <xref:System.EnterpriseServices> namespace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (int retaining, int commitType, int reserved);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(int32 retaining, int32 commitType, int32 reserved) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="retaining" Type="System.Int32" />
        <Parameter Name="commitType" Type="System.Int32" />
        <Parameter Name="reserved" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="retaining">This value must be <see langword="false" />.</param>
        <param name="commitType">A value taken from the OLE DB enumeration <see langword="XACTTC" />.</param>
        <param name="reserved">This value must be zero.</param>
        <summary>Commits a transaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For values of `commitType`, see `ITransaction::Commit` in the OLE DB Programmers Reference.  
  
 You should not implement any method of this interface, as it is used only by the <xref:System.Transactions.TransactionInterop> class internally to represent the unmanaged version of the <xref:System.EnterpriseServices.ITransaction> interface of the <xref:System.EnterpriseServices> namespace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransactionInfo">
      <MemberSignature Language="C#" Value="public void GetTransactionInfo (IntPtr transactionInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTransactionInfo(native int transactionInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionInformation" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="transactionInformation">Pointer to the caller-allocated <see cref="System.EnterpriseServices.XACTTRANSINFO" /> structure that will receive information about the transaction. This value must not be <see langword="null" />.</param>
        <summary>Retrieves information about a transaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should not implement any method of this interface, as it is used only by the <xref:System.Transactions.TransactionInterop> class internally to represent the unmanaged version of the <xref:System.EnterpriseServices.ITransaction> interface of the <xref:System.EnterpriseServices> namespace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>