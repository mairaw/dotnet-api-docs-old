<Type Name="XmlTextAttribute" FullName="System.Xml.Serialization.XmlTextAttribute">
  <TypeSignature Language="C#" Value="public class XmlTextAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlTextAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member must be treated as XML text when the class that contains it is serialized or deserialized.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The XmlTextAttribute belongs to a family of attributes that controls how the <xref:System.Xml.Serialization.XmlSerializer> serializes and deserializes an object (through its <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> and <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> methods). For a complete list of similar attributes, see [Attributes That Control XML Serialization](../Topic/Attributes%20That%20Control%20XML%20Serialization.md).  
  
 Only one instance of the XmlTextAttribute class can be applied in a class.  
  
 You can apply the XmlTextAttribute to public fields and public read/write properties that return primitive and enumeration types.  
  
 You can apply the XmlTextAttribute to a field or property that returns an array of strings. You can also apply the attribute to an array of type <xref:System.Object> but you must set the <xref:System.Xml.Serialization.XmlTextAttribute.Type%2A> property to string. In that case, any strings inserted into the array are serialized as XML text.  
  
 The XmlTextAttribute can also be applied to a field that returns an <xref:System.Xml.XmlNode> or an array of <xref:System.Xml.XmlNode> objects.  
  
 By default, the <xref:System.Xml.Serialization.XmlSerializer> serializes a class member as an XML element. However, if you apply the XmlTextAttribute to a member, the <xref:System.Xml.Serialization.XmlSerializer> translates its value into XML text. This means that the value is encoded into the content of an XML element.  
  
 The [XML Schema Definition Tool (Xsd.exe)](../Topic/XML%20Schema%20Definition%20Tool%20\(Xsd.exe\).md) occasionally generates the XmlTextAttribute when creating classes from an XML Schema definition (XSD) file. This occurs when the schema contains a `complexType` with mixed content; in that case, the corresponding class contains a member that returns a string array to which the XmlTextAttribute is applied. For example, when the `Xml Schema Definition` tool processes this schema:  
  
```  
<xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace=""   
xmlns:xs="http://www.w3.org/2001/XMLSchema">  
  <xs:element name="LinkList" type="LinkList" />  
  <xs:complexType name="LinkList" mixed="true">  
    <xs:sequence>  
      <xs:element minOccurs="1" maxOccurs="1" name="id" type="xs:int" />  
      <xs:element minOccurs="0" maxOccurs="1" name="name" type="xs:string" />  
      <xs:element minOccurs="0" maxOccurs="1" name="next" type="LinkList" />  
    </xs:sequence>  
  </xs:complexType>  
</xs:schema>  
```  
  
 the following class is generated (extra spaces and remarks have been removed):  
  
 [!code-vb[XmlTextAttribute#0](~/add/codesnippet/visualbasic/t-system.xml.serializati_15_1.vb)]
 [!code-cs[XmlTextAttribute#0](~/add/codesnippet/csharp/t-system.xml.serializati_15_1.cs)]  
  
 For more information about using attributes, see [Attributes](../Topic/Extending%20Metadata%20Using%20Attributes.md).  
  
> [!NOTE]
>  You can use the word `XmlText` in your code instead of the longer XmlTextAttribute.  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/add/codesnippet/cpp/t-system.xml.serializati_15_2.cpp)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/add/codesnippet/visualbasic/t-system.xml.serializati_15_2.vb)]
 [!code-cs[Classic XmlTextAttribute Example#1](~/add/codesnippet/csharp/t-system.xml.serializati_15_2.cs)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTextAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can override the way that the <xref:System.Xml.Serialization.XmlSerializer> serializes a public field or public read/write property by creating an <xref:System.Xml.Serialization.XmlAttributes>, and setting its <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> property to an <xref:System.Xml.Serialization.XmlTextAttribute>. For more details, see the <xref:System.Xml.Serialization.XmlAttributeOverrides> class.  
  
   
  
## Examples  
 The following example serializes a class that contains a public field, named `Comment`. The example applies an <xref:System.Xml.Serialization.XmlTextAttribute> to the field, thereby overriding its serialization as an XML element, and instead serializing it as XML text.  
  
 [!code-vb[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.serializati_38_1.vb)]
 [!code-cs[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.serializati_38_1.cs)]
 [!code-cpp[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.serializati_38_1.cpp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> of the member to be serialized.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can override the way that the <xref:System.Xml.Serialization.XmlSerializer> serializes a public field or public read/write property by creating an <xref:System.Xml.Serialization.XmlAttributes>, and setting its <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> property to an <xref:System.Xml.Serialization.XmlTextAttribute>. For more details, see the <xref:System.Xml.Serialization.XmlAttributeOverrides> class.  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.serializati_31_1.cpp)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.serializati_31_1.vb)]
 [!code-cs[Classic XmlTextAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.serializati_31_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTextAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the XML Schema definition language (XSD) data type of the text generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
        <value>An XML Schema (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: Datatypes".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the DataType property to an XML Schema simple data type affects the format of the generated XML. For example, setting the property to "date" causes the generated text to be formatted in the general date style, for example: 2001-08-31. By contrast, setting the property to "dateTime" results in a specific instant as defined by the International Organization for Standardization document 8601, "Representations of Dates and Times", for example: 2001-08-15T06:59:11.0508456-07:00.  
  
 The effect of setting the DataType property can also be seen when using the [XML Schema Definition Tool (Xsd.exe)](../Topic/XML%20Schema%20Definition%20Tool%20\(Xsd.exe\).md) to generate the XML Schema for a compiled file. For more information on using the tool, see [The XML Schema Definition Tool and XML Serialization](../Topic/The%20XML%20Schema%20Definition%20Tool%20and%20XML%20Serialization.md).  
  
 The following table lists the XML Schema simple data types with their .NET equivalents.  
  
 For the XML Schema `base64Binary` and `hexBinary` data types, use an array of <xref:System.Byte> structures, and apply a <xref:System.Xml.Serialization.XmlTextAttribute> with the DataType set to "base64Binary" or "hexBinary", as appropriate. For the XML Schema `time` and `date` data types, use the <xref:System.DateTime> type and apply the <xref:System.Xml.Serialization.XmlTextAttribute> with the DataType set to "date" or "time".  
  
 For every XML Schema data type that is mapped to a string, apply the <xref:System.Xml.Serialization.XmlTextAttribute> with its DataType property set to the XML Schema data type. Note that this does not change the serialization format, only the schema for the member.  
  
> [!NOTE]
>  The property is case-sensitive, so you must set it exactly to one of the XML Schema data types.  
  
> [!NOTE]
>  Passing binary data as an XML element is more efficient than passing it as an XML attribute.  
  
 For more information about XML Schema data types, see the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".  
  
|XSD data type|.NET data type|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Array of <xref:System.Byte> objects|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|ENTITIES|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Array of <xref:System.Byte> objects|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|integer|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|Name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|time|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_50_1.cpp)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_50_1.vb)]
 [!code-cs[Classic XmlTextAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_50_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type.</exception>
        <exception cref="T:System.InvalidOperationException">The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTextAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of the member.</summary>
        <value>The <see cref="T:System.Type" /> of the member.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type> property can only be set to primitive types and enumerations.  
  
 The <xref:System.Xml.Serialization.XmlTextAttribute> can also be applied to a field that returns an <xref:System.Xml.XmlNode> or an array of <xref:System.Xml.XmlNode> objects.  
  
 You can apply the <xref:System.Xml.Serialization.XmlTextAttribute> to a field or property that returns an array of strings. You can also apply the attribute to an array of type <xref:System.Object> but you must set the Type property to string. In that case, any strings inserted into the array are serialized as XML text.  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_77_1.cpp)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_77_1.vb)]
 [!code-cs[Classic XmlTextAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_77_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>