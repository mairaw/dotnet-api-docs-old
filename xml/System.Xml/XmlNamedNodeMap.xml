<Type Name="XmlNamedNodeMap" FullName="System.Xml.XmlNamedNodeMap">
  <TypeSignature Language="C#" Value="public class XmlNamedNodeMap : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlNamedNodeMap extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlNamedNodeMap" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a collection of nodes that can be accessed by name or index.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlNamedNodeMap` is returned by the following three properties.  
  
-   <xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName> - Returns <xref:System.Xml.XmlAttributeCollection>, a class which inherits from `XmlNamedNodeMap`.  
  
-   <xref:System.Xml.XmlDocumentType.Entities%2A?displayProperty=fullName> - Returns an `XmlNamedNodeMap` containing <xref:System.Xml.XmlEntity> objects. The `XmlNamedNodeMap` is read-only.  
  
-   <xref:System.Xml.XmlDocumentType.Notations%2A?displayProperty=fullName> - Returns an `XmlNamedNodeMap` containing <xref:System.Xml.XmlNotation> objects. The `XmlNamedNodeMap` is read-only.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlNamedNodeMap.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of nodes in the <see langword="XmlNamedNodeMap" />.</summary>
        <value>The number of nodes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Xml.XmlAttributeCollection> class (which inherits from `XmlNamedNodeMap`) to display all the attributes of a book.  
  
 [!code-cpp[Classic WebData XmlNamedNodeMap.Count Example#1](~/add/codesnippet/cpp/p-system.xml.xmlnamednod_1.cpp)]
 [!code-vb[Classic WebData XmlNamedNodeMap.Count Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlnamednod_1.vb)]
 [!code-cs[Classic WebData XmlNamedNodeMap.Count Example#1](~/add/codesnippet/csharp/p-system.xml.xmlnamednod_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides support for the "foreach" style iteration over the collection of nodes in the <see langword="XmlNamedNodeMap" />.</summary>
        <returns>An enumerator object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays all attributes in the collection.  
  
 [!code-cpp[Classic WebData XmlNamedNodeMap.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.xml.xmlnamednod_1_1.cpp)]
 [!code-cs[Classic WebData XmlNamedNodeMap.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.xml.xmlnamednod_1_1.cs)]
 [!code-vb[Classic WebData XmlNamedNodeMap.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlnamednod_1_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedItem">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode GetNamedItem (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode GetNamedItem(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the node to retrieve. It is matched against the <see cref="System.Xml.XmlNode.Name%2A" /> property of the matching node.</param>
        <summary>Retrieves an <see cref="T:System.Xml.XmlNode" /> specified by name.</summary>
        <returns>An <see langword="XmlNode" /> with the specified name or <see langword="null" /> if a matching node is not found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Xml.XmlAttributeCollection> class (which inherits from `XmlNamedNodeMap`) to modify an attribute.  
  
 [!code-cs[Classic WebData XmlNamedNodeMap.GetNamedItem Example#1](~/add/codesnippet/csharp/m-system.xml.xmlnamednod_4_1.cs)]
 [!code-cpp[Classic WebData XmlNamedNodeMap.GetNamedItem Example#1](~/add/codesnippet/cpp/m-system.xml.xmlnamednod_4_1.cpp)]
 [!code-vb[Classic WebData XmlNamedNodeMap.GetNamedItem Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlnamednod_4_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedItem">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode GetNamedItem (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode GetNamedItem(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the node to retrieve.</param>
        <param name="namespaceURI">The namespace Uniform Resource Identifier (URI) of the node to retrieve.</param>
        <summary>Retrieves a node with the matching <see cref="System.Xml.XmlNode.LocalName%2A" /> and <see cref="System.Xml.XmlNode.NamespaceURI%2A" />.</summary>
        <returns>An <see cref="T:System.Xml.XmlNode" /> with the matching local name and namespace URI or <see langword="null" /> if a matching node was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode Item (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode Item(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index position of the node to retrieve from the <see langword="XmlNamedNodeMap" />. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <see cref="System.Xml.XmlNamedNodeMap.Count%2A" /> -1.</param>
        <summary>Retrieves the node at the specified index in the <see langword="XmlNamedNodeMap" />.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> at the specified index. If <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="System.Xml.XmlNamedNodeMap.Count%2A" /> property, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Xml.XmlAttributeCollection> class (which inherits from `XmlNamedNodeMap`) to display all the attributes of a book.  
  
 [!code-cpp[Classic WebData XmlNamedNodeMap.Count Example#1](~/add/codesnippet/cpp/m-system.xml.xmlnamednod_3_1.cpp)]
 [!code-vb[Classic WebData XmlNamedNodeMap.Count Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlnamednod_3_1.vb)]
 [!code-cs[Classic WebData XmlNamedNodeMap.Count Example#1](~/add/codesnippet/csharp/m-system.xml.xmlnamednod_3_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNamedItem">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode RemoveNamedItem (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode RemoveNamedItem(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the node to remove. The name is matched against the <see cref="System.Xml.XmlNode.Name%2A" /> property of the matching node.</param>
        <summary>Removes the node from the <see langword="XmlNamedNodeMap" />.</summary>
        <returns>The <see langword="XmlNode" /> removed from this <see langword="XmlNamedNodeMap" /> or <see langword="null" /> if a matching node was not found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Xml.XmlAttributeCollection> class (which inherits from `XmlNamedNodeMap`) to remove an attribute.  
  
 [!code-cs[Classic WebData XmlNamedNodeMap.RemoveNamedItem1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlnamednod_0_1.cs)]
 [!code-cpp[Classic WebData XmlNamedNodeMap.RemoveNamedItem1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlnamednod_0_1.cpp)]
 [!code-vb[Classic WebData XmlNamedNodeMap.RemoveNamedItem1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlnamednod_0_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNamedItem">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode RemoveNamedItem (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode RemoveNamedItem(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the node to remove.</param>
        <param name="namespaceURI">The namespace URI of the node to remove.</param>
        <summary>Removes a node with the matching <see cref="System.Xml.XmlNode.LocalName%2A" /> and <see cref="System.Xml.XmlNode.NamespaceURI%2A" />.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> removed or <see langword="null" /> if a matching node was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNamedItem">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode SetNamedItem (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode SetNamedItem(class System.Xml.XmlNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="node">An <see langword="XmlNode" /> to store in the <see langword="XmlNamedNodeMap" />. If a node with that name is already present in the map, it is replaced by the new one.</param>
        <summary>Adds an <see cref="T:System.Xml.XmlNode" /> using its <see cref="System.Xml.XmlNode.Name%2A" /> property.</summary>
        <returns>If the <paramref name="node" /> replaces an existing node with the same name, the old node is returned; otherwise, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Xml.XmlAttributeCollection> class (which inherits from `XmlNamedNodeMap`) to add an attribute to the collection.  
  
 [!code-cs[Classic WebData XmlNamedNodeMap.SetNamedItem Example#1](~/add/codesnippet/csharp/m-system.xml.xmlnamednod_2_1.cs)]
 [!code-cpp[Classic WebData XmlNamedNodeMap.SetNamedItem Example#1](~/add/codesnippet/cpp/m-system.xml.xmlnamednod_2_1.cpp)]
 [!code-vb[Classic WebData XmlNamedNodeMap.SetNamedItem Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlnamednod_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="node" /> was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created the <see langword="XmlNamedNodeMap" />; or the <see langword="XmlNamedNodeMap" /> is read-only.</exception>
      </Docs>
    </Member>
  </Members>
</Type>