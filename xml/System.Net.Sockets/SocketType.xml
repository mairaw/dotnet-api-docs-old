<Type Name="SocketType" FullName="System.Net.Sockets.SocketType">
  <TypeSignature Language="C#" Value="public enum SocketType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SocketType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.SocketType" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifies the type of socket that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class represents.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before a <xref:System.Net.Sockets.Socket> can send and receive data, it must first be created using an <xref:System.Net.Sockets.AddressFamily>, a SocketType, and a <xref:System.Net.Sockets.ProtocolType>. The SocketType enumeration provides several options for defining the type of <xref:System.Net.Sockets.Socket> that you intend to open.  
  
> [!NOTE]
>  SocketType will sometimes implicitly indicate which <xref:System.Net.Sockets.ProtocolType> will be used within an <xref:System.Net.Sockets.AddressFamily>. For example when the SocketType is Dgram, the <xref:System.Net.Sockets.ProtocolType> is always <xref:System.Net.Sockets.ProtocolType>.When the SocketType is Stream, the <xref:System.Net.Sockets.ProtocolType> is always <xref:System.Net.Sockets.ProtocolType>. If you try to create a <xref:System.Net.Sockets.Socket> with an incompatible combination, <xref:System.Net.Sockets.Socket> will throw a <xref:System.Net.Sockets.SocketException>.  
  
   
  
## Examples  
 The following example uses the Stream enumerated member as a parameter to the <xref:System.Net.Sockets.Socket> constructor.  
  
 [!code-cs[SelectModeExample#1](~/add/codesnippet/csharp/t-system.net.sockets.soc_4_1.cs)]
 [!code-cpp[SelectModeExample#1](~/add/codesnippet/cpp/t-system.net.sockets.soc_4_1.cpp)]
 [!code-vb[SelectModeExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.soc_4_1.vb)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dgram">
      <MemberSignature Language="C#" Value="Dgram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Dgram = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Dgram" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length. Messages might be lost or duplicated and might arrive out of order. A <see cref="T:System.Net.Sockets.Socket" /> of type Dgram requires no connection prior to sending and receiving data, and can communicate with multiple peers. Dgram uses the Datagram Protocol (<see cref="System.Net.Sockets.ProtocolType.Udp" />) and the <see cref="System.Net.Sockets.AddressFamily.InterNetwork" /><see cref="T:System.Net.Sockets.AddressFamily" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C#" Value="Raw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Raw = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Raw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Supports access to the underlying transport protocol. Using the SocketTypeRaw, you can communicate using protocols like Internet Control Message Protocol (<see cref="System.Net.Sockets.ProtocolType.Icmp" />) and Internet Group Management Protocol (<see cref="System.Net.Sockets.ProtocolType.Igmp" />). Your application must provide a complete IP header when sending. Received datagrams return with the IP header and options intact.</summary>
      </Docs>
    </Member>
    <Member MemberName="Rdm">
      <MemberSignature Language="C#" Value="Rdm" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Rdm = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Rdm" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data. Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order. Furthermore, the sender is notified if messages are lost. If you initialize a <see langword="Socket" /> using Rdm, you do not require a remote host connection before sending and receiving data. With Rdm, you can communicate with multiple peers.</summary>
      </Docs>
    </Member>
    <Member MemberName="Seqpacket">
      <MemberSignature Language="C#" Value="Seqpacket" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Seqpacket = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Seqpacket" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network. Seqpacket does not duplicate data, and it preserves boundaries within the data stream. A <see langword="Socket" /> of type Seqpacket communicates with a single peer and requires a remote host connection before communication can begin.</summary>
      </Docs>
    </Member>
    <Member MemberName="Stream">
      <MemberSignature Language="C#" Value="Stream" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Stream = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Stream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. A <see langword="Socket" /> of this type communicates with a single peer and requires a remote host connection before communication can begin. Stream uses the Transmission Control Protocol (<see cref="T:System.Net.Sockets.ProtocolType" />) <see cref="T:System.Net.Sockets.ProtocolType" /> and the <see langword="InterNetwork" /><see cref="T:System.Net.Sockets.AddressFamily" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Unknown = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies an unknown <see langword="Socket" /> type.</summary>
      </Docs>
    </Member>
  </Members>
</Type>