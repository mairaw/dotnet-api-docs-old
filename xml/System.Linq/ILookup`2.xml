<Type Name="ILookup&lt;TKey,TElement&gt;" FullName="System.Linq.ILookup&lt;TKey,TElement&gt;">
  <TypeSignature Language="C#" Value="public interface ILookup&lt;TKey,TElement&gt; : System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILookup`2&lt;TKey, TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.ILookup`2" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The type of the keys in the ILookup(TKey,.</typeparam>
    <typeparam name="TElement">The type of the elements in the <see cref="System.Collections.Generic.IEnumerable%601" /> sequences that make up the values in the ILookup(TKey,.</typeparam>
    <summary>Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="System.Collections.Generic.IEnumerable%601" /> sequences of values.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The type <xref:System.Linq.Lookup%602> implements the ILookup(TKey, interface.  
  
 The extension method <xref:System.Linq.Enumerable.ToLookup%2A>, which can be appended to the end of a LINQ query, returns an object of type ILookup(TKey,.  
  
   
  
## Examples  
 The following code example creates an ILookup(TKey, object and iterates through its contents.  
  
 [!code-cs[System.Linq.ILookup#1](~/add/codesnippet/csharp/t-system.linq.ilookup`2_1.cs)]
 [!code-vb[System.Linq.ILookup#1](~/add/codesnippet/visualbasic/t-system.linq.ilookup`2_1.vb)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ILookup`2.Contains(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key to search for in the <see cref="System.Linq.ILookup%602" />.</param>
        <summary>Determines whether a specified key exists in the <see cref="System.Linq.ILookup%602" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="key" /> is in the <see cref="System.Linq.ILookup%602" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Linq.ILookup`2.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of key/value collection pairs in the <see cref="System.Linq.ILookup%602" />.</summary>
        <value>The number of key/value collection pairs in the <see cref="System.Linq.ILookup%602" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TElement&gt; this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt; Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Linq.ILookup`2.Item(`0)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key of the desired sequence of values.</param>
        <summary>Gets the <see cref="System.Collections.Generic.IEnumerable%601" /> sequence of values indexed by a specified key.</summary>
        <value>The <see cref="System.Collections.Generic.IEnumerable%601" /> sequence of values indexed by the specified key.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>