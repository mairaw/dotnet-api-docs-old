<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Defines a message inspector object that can be added to the <see cref="System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A" /> collection to view or modify messages.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implement the IClientMessageInspector interface and add it to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a [!INCLUDE[indigo2](~/add/includes/indigo2-md.md)] client object. For details, see <xref:System.ServiceModel.Dispatcher.ClientRuntime>.  
  
   
  
## Examples  
 The following code example shows an implementation that writes strings to the console when the implementation is called.  
  
 [!code-vb[Interceptors#1](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#1)]
 [!code-cs[Interceptors#1](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#1)]  
  
 The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> to insert the client message inspector in the client endpoint.  
  
 [!code-vb[Interceptors#2](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#2)]
 [!code-cs[Interceptors#2](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#2)]  
  
 Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.  
  
   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">The message to be transformed into types and handed back to the client application.</param>
        <param name="correlationState">Correlation state data.</param>
        <summary>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implement AfterReceiveReply to inspect or modify a reply message after it has been received by the [!INCLUDE[indigo2](~/add/includes/indigo2-md.md)] client object but before it is deserialized into objects that are returned to the client application.  
  
 The `correlationState` is the object returned by the user when <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> is called for this message. The best practice is to make this a <xref:System.Guid?displayProperty=fullName> to ensure that no two `correlationState` objects are the same.  
  
   
  
## Examples  
 The following code example shows an implementation that writes strings to the console when the implementation is called.  
  
 [!code-vb[Interceptors#1](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#1)]
 [!code-cs[Interceptors#1](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#1)]  
  
 The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> to insert the client message inspector in the client endpoint.  
  
 [!code-vb[Interceptors#2](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#2)]
 [!code-cs[Interceptors#2](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#2)]  
  
 Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.  
  
   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request">The message to be sent to the service.</param>
        <param name="channel">The [!INCLUDE[indigo2](~/add/includes/indigo2-md.md)] client object channel.</param>
        <summary>Enables inspection or modification of a message before a request message is sent to a service.</summary>
        <returns>The object that is returned as the <paramref name="correlationState " />argument of the <see cref="System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A" /> method. This is <see langword="null" /> if no correlation state is used.  
  
 The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implement the BeforeSendRequest to inspect or modify a request message before it is sent.  
  
   
  
## Examples  
 The following code example shows an implementation that writes strings to the console when the implementation is called.  
  
 [!code-vb[Interceptors#1](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#1)]
 [!code-cs[Interceptors#1](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#1)]  
  
 The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> to insert the client message inspector in the client endpoint.  
  
 [!code-vb[Interceptors#2](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#2)]
 [!code-cs[Interceptors#2](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#2)]  
  
 Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.  
  
   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>