<Type Name="IOutputChannel" FullName="System.ServiceModel.Channels.IOutputChannel">
  <TypeSignature Language="C#" Value="public interface IOutputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOutputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IOutputChannel" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Defines the interface that a channel must implement to send a message.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IOutputChannel interface defines synchronous and asynchronous variants of the <xref:System.ServiceModel.ClientBase%601.ChannelBase%601.System%23ServiceModel%23Channels%23IOutputChannel%23Send%2A> operation. It provides a <xref:System.ServiceModel.Channels.IOutputChannel.RemoteAddress%2A> for the destination of the messages sent out on the channel.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginSend(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
        <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
        <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
        <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel.</summary>
        <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The destination for messages sent out on an output channel is specified at channel creation time.  
  
 The BeginSend method does not guarantee the delivery of message to the remote endpoint. If delivery guarantees are required, use the <xref:System.ServiceModel.Channels.IOutputSessionChannel>.  
  
 If the message sent is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.  
  
   
  
## Examples  
 The following code illustrates how to implement this method:  
  
 [!code-cs[S_UE_MessageInterceptor#2](~/add/codesnippet/csharp/46438db6-912c-4b3d-9a19-_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.ServiceModel.Channels.Message message, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginSend(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
        <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies how long the send operation has to complete before timing out.</param>
        <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
        <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
        <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
        <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The destination for messages sent out on an output channel is specified at channel creation time.  
  
 The BeginSend method does not guarantee the delivery of message to the remote endpoint. If delivery guarantees are required, use <xref:System.ServiceModel.Channels.IOutputSessionChannel>.  
  
 If the message sent is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.  
  
   
  
## Examples  
 The following code illustrates how to implement this method:  
  
 [!code-cs[S_UE_MessageInterceptor#3](~/add/codesnippet/csharp/1bab178b-e41f-497d-8790-_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public void EndSend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndSend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="System.ServiceModel.Channels.IOutputChannel.BeginSend%2A" /> method.</param>
        <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the message sent is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.  
  
   
  
## Examples  
 The following code illustrates how to implement this method:  
  
 [!code-cs[S_UE_MessageInterceptor#4](~/add/codesnippet/csharp/m-system.servicemodel.ch_17_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress RemoteAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the destination of the service to which messages are sent out on the output channel.</summary>
        <value>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:System.ServiceModel.Channels.IOutputChannel.Via%2A> is not specified. If the <xref:System.ServiceModel.Channels.IOutputChannel.Via%2A> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.  
  
   
  
## Examples  
 The following code illustrates how to implement this property:  
  
 [!code-cs[S_UE_MessageInterceptor#0](~/add/codesnippet/csharp/p-system.servicemodel.ch_25_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Send(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
        <summary>Transmits a message to the destination of the output channel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The destination for messages sent out on an output channel is specified at channel creation time.  
  
 The Send method does not guarantee the delivery of message to the remote endpoint. An implementation of <xref:System.ServiceModel.Channels.IOutputChannel> can silently drop messages for a variety of reasons. There may be no more buffer room, for example. If delivery guarantees are required, use <xref:System.ServiceModel.Channels.IOutputSessionChannel>.  
  
 Passing the message into the output channel causes the message to be consumed. After you call Send, you can no longer inspect the message or call <xref:System.ServiceModel.Channels.Message.Close%2A> on the message.  
  
   
  
## Examples  
 The following code illustrates how to implement this method:  
  
 [!code-cs[S_UE_MessageInterceptor#5](~/add/codesnippet/csharp/08ee4a38-3c14-4c57-a6ad-_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.ServiceModel.Channels.Message message, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Send(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
        <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies how long the send operation has to complete before timing out.</param>
        <summary>Sends a message on the current output channel within a specified interval of time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The destination for messages sent out on an output channel is specified at channel creation time.  
  
 The <xref:System.ServiceModel.Channels.IOutputChannel.Send%2A> method does not guarantee the delivery of message to the remote endpoint. An implementation of <xref:System.ServiceModel.Channels.IOutputChannel> can silently drop messages for a variety of reasons. There may be no more buffer room, for example. If delivery guarantees are required, use <xref:System.ServiceModel.Channels.IOutputSessionChannel>.  
  
 Passing the message into the output channel causes the message to be consumed. After you call <xref:System.ServiceModel.Channels.IOutputChannel.Send%2A>, you can no longer inspect the message or call <xref:System.ServiceModel.Channels.Message.Close%2A> on the message.  
  
   
  
## Examples  
 The following code illustrates how to implement this method:  
  
 [!code-cs[S_UE_MessageInterceptor#6](~/add/codesnippet/csharp/64154944-db44-4662-a4fa-_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Via">
      <MemberSignature Language="C#" Value="public Uri Via { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Via" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IOutputChannel.Via" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
        <value>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a Via is not specified. If the Via is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.  
  
   
  
## Examples  
 The following code illustrates how to implement this property:  
  
 [!code-cs[S_UE_MessageInterceptor#1](~/add/codesnippet/csharp/p-system.servicemodel.ch_39_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>