<Type Name="CredentialCache" FullName="System.Net.CredentialCache">
  <TypeSignature Language="C#" Value="public class CredentialCache : System.Collections.IEnumerable, System.Net.ICredentials, System.Net.ICredentialsByHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CredentialCache extends System.Object implements class System.Collections.IEnumerable, class System.Net.ICredentials, class System.Net.ICredentialsByHost" />
  <TypeSignature Language="DocId" Value="T:System.Net.CredentialCache" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentials</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentialsByHost</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides storage for multiple credentials.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CredentialCache class stores credentials for multiple Internet resources. Applications that need to access multiple resources can store the credentials for those resources in a CredentialCache instance that then provides the proper set of credentials to the Internet resource when required. When the <xref:System.Net.CredentialCache.GetCredential%2A> method is called, it compares the Uniform Resource Identifier (URI) and authentication type provided with those stored in the cache and returns the first set of credentials that match.  
  
 The <xref:System.Net.CredentialCache.DefaultCredentials%2A> property contains the system credentials of the current security context. For client applications, these represent the user name, password, and domain of the user who is currently logged in. For ASP.NET applications, the default credentials are the user credentials of the logged-in user or the user being impersonated.  
  
   
  
## Examples  
 The following code example initializes a CredentialCache with multiple security credentials and uses those credentials with a <xref:System.Net.WebRequest>.  
  
 [!code-cs[Classic CredentialCache.Add Example#1](~/add/codesnippet/csharp/t-system.net.credentialc_1.cs)]
 [!code-cpp[Classic CredentialCache.Add Example#1](~/add/codesnippet/cpp/t-system.net.credentialc_1.cpp)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/add/codesnippet/visualbasic/t-system.net.credentialc_1.vb)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CredentialCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Net.CredentialCache" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The constructor creates a <xref:System.Net.CredentialCache> instance.  
  
   
  
## Examples  
 The following code example initializes a <xref:System.Net.CredentialCache> with multiple security credentials and uses those credentials with a <xref:System.Net.WebRequest>.  
  
 [!code-cs[Classic CredentialCache.Add Example#1](~/add/codesnippet/csharp/m-system.net.credentialc_2_1.cs)]
 [!code-cpp[Classic CredentialCache.Add Example#1](~/add/codesnippet/cpp/m-system.net.credentialc_2_1.cpp)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/add/codesnippet/visualbasic/m-system.net.credentialc_2_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Uri uriPrefix, string authType, System.Net.NetworkCredential cred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Uri uriPrefix, string authType, class System.Net.NetworkCredential cred) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
        <Parameter Name="cred" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential grants access to.</param>
        <param name="authType">The authentication scheme used by the resource named in <c>uriPrefix</c>.</param>
        <param name="cred">The <see cref="T:System.Net.NetworkCredential" /> to add to the credential cache.</param>
        <summary>Adds a <see cref="T:System.Net.NetworkCredential" /> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Add method places a <xref:System.Net.NetworkCredential> instance for use with protocols other than SMTP into the <xref:System.Net.CredentialCache>. The cache stores credentials in the order in which they are added to it. When the <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29> method is called, it returns the proper matching <xref:System.Net.NetworkCredential> instance.  
  
   
  
## Examples  
 The following code example initializes a <xref:System.Net.CredentialCache> with multiple security credentials and uses those credentials with a <xref:System.Net.WebRequest>.  
  
 [!code-cs[Classic CredentialCache.Add Example#1](~/add/codesnippet/csharp/10425cba-d6a1-423f-9e8c-_1.cs)]
 [!code-cpp[Classic CredentialCache.Add Example#1](~/add/codesnippet/cpp/10425cba-d6a1-423f-9e8c-_1.cpp)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/add/codesnippet/visualbasic/10425cba-d6a1-423f-9e8c-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="authType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The same credentials are added more than once.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string host, int port, string authenticationType, System.Net.NetworkCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string host, int32 port, string authenticationType, class System.Net.NetworkCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> that identifies the host computer.</param>
        <param name="port">A <see cref="T:System.Int32" /> that specifies the port to connect to on <c>host</c>.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> that identifies the authentication scheme used when connecting to <c>host</c> using <c>cred</c>. See Remarks.</param>
        <param name="credential">The <see cref="T:System.Net.NetworkCredential" /> to add to the credential cache.</param>
        <summary>Adds a <see cref="T:System.Net.NetworkCredential" /> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method places a <xref:System.Net.NetworkCredential> instance for use with SMTP into the <xref:System.Net.CredentialCache>. The cache stores credentials in the order in which they are added to it. When the <xref:System.Net.CredentialCache.GetCredential%28System.String%2CSystem.Int32%2CSystem.String%29> method is called, it returns a <xref:System.Net.NetworkCredential> instance that is selected by matching the `host`, `port`, and `authType`. The comparison is done case-insensitively.  
  
 The supported values for `authType` are "NTLM", "Digest", "Kerberos", and "Negotiate".  
  
 Credentials added with this method are only valid for use with SMTP. This method does not work for HTTP or FTP protocols.  
  
   
  
## Examples  
 The following code example initializes a <xref:System.Net.CredentialCache> with multiple security credentials for use with SMTP and uses one of those credentials with a <xref:System.Net.Mail.SmtpClient>.  
  
 [!code-cs[NCL_Credential.Cache.Add_SMTP#1](~/add/codesnippet/csharp/98f070bc-c7fb-40fa-8c84-_1.cs)]
 [!code-cpp[NCL_Credential.Cache.Add_SMTP#1](~/add/codesnippet/cpp/98f070bc-c7fb-40fa-8c84-_1.cpp)]
 [!code-vb[NCL_Credential.Cache.Add_SMTP#1](~/add/codesnippet/visualbasic/98f070bc-c7fb-40fa-8c84-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="host" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="authType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="authType" /> not an accepted value. See Remarks.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> is less than zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentials DefaultCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentials DefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the system credentials of the application.</summary>
        <value>An <see cref="T:System.Net.ICredentials" /> that represents the system credentials of the application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DefaultCredentials property applies only to NTLM, negotiate, and Kerberos-based authentication.  
  
 DefaultCredentials represents the system credentials for the current security context in which the application is running. For a client-side application, these are usually the Windows credentials (user name, password, and domain) of the user running the application. For ASP.NET applications, the default credentials are the user credentials of the logged-in user, or the user being impersonated.  
  
 To get the credentials as a <xref:System.Net.NetworkCredential> instance, use the <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> property.  
  
 The supported values for `authType` are "NTLM", "Digest", "Kerberos", and "Negotiate". This method does not work for HTTP or FTP protocols.  
  
> [!NOTE]
>  The <xref:System.Net.ICredentials> instance returned by DefaultCredentials cannot be used to view the user name, password, or domain of the current security context.  
  
   
  
## Examples  
 The following code example uses the DefaultCredentials property to get the system credentials of the application.  
  
 [!code-vb[CredentialCache_DefaultCredentials#1](~/add/codesnippet/visualbasic/p-system.net.credentialc_1.vb)]
 [!code-cpp[CredentialCache_DefaultCredentials#1](~/add/codesnippet/cpp/p-system.net.credentialc_1.cpp)]
 [!code-cs[CredentialCache_DefaultCredentials#1](~/add/codesnippet/csharp/p-system.net.credentialc_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">for reading the USERNAME environment variable. Associated enumeration: <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultNetworkCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkCredential DefaultNetworkCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.NetworkCredential DefaultNetworkCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the network credentials of the current security context.</summary>
        <value>An <see cref="T:System.Net.NetworkCredential" /> that represents the network credentials of the current user or application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The credentials returned by the DefaultNetworkCredentials property is applicable only for NTLM, negotiate, and Kerberos-based authentication.  
  
 The credentials returned by DefaultNetworkCredentials represents the authentication credentials for the current security context in which the application is running. For a client-side application, these are usually the Windows credentials (user name, password, and domain) of the user running the application. For ASP.NET applications, the default network credentials are the user credentials of the logged-in user, or the user being impersonated.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">for reading the USERNAME environment variable. Associated enumeration: <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential grants access to.</param>
        <param name="authType">The authentication scheme used by the resource named in <c>uriPrefix</c>.</param>
        <summary>Returns the <see cref="T:System.Net.NetworkCredential" /> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</summary>
        <returns>A <see cref="T:System.Net.NetworkCredential" /> or, if there is no matching credential in the cache, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetCredential method searches the <xref:System.Net.CredentialCache> and returns the <xref:System.Net.NetworkCredential> instance for the specified URI and authorization type. If the <xref:System.Net.CredentialCache> contains no matching <xref:System.Net.NetworkCredential> instance, `null` is returned.  
  
 GetCredential uses the longest matching URI prefix in the cache to determine which set of credentials to return for an authorization type. The following table shows examples.  
  
|URI Prefix|Matches|  
|----------------|-------------|  
|`http://www.contoso.com/portal/news.htm`|Requests for the specific Web page `news.htm`.|  
|`http://www.contoso.com/portal/`|Requests for all content in the `portal` path, except the page `news.htm`.|  
|`http://www.contoso.com/`|Requests for all resources at `www.contoso.com`, except those in the `portal` path.|  
  
   
  
## Examples  
 The following code example uses the GetCredential method to return the <xref:System.Net.NetworkCredential> instance associated with the specified URI and authentication type.  
  
 [!code-cpp[CredentialCache_GetCredential#1](~/add/codesnippet/cpp/m-system.net.credentialc_1_1.cpp)]
 [!code-cs[CredentialCache_GetCredential#1](~/add/codesnippet/csharp/m-system.net.credentialc_1_1.cs)]
 [!code-vb[CredentialCache_GetCredential#1](~/add/codesnippet/visualbasic/m-system.net.credentialc_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> or <paramref name="authType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> that identifies the host computer.</param>
        <param name="port">A <see cref="T:System.Int32" /> that specifies the port to connect to on <c>host</c>.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> that identifies the authentication scheme used when connecting to <c>host</c>. See Remarks.</param>
        <summary>Returns the <see cref="T:System.Net.NetworkCredential" /> instance associated with the specified host, port, and authentication protocol.</summary>
        <returns>A <see cref="T:System.Net.NetworkCredential" /> or, if there is no matching credential in the cache, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method searches the <xref:System.Net.CredentialCache> and returns the <xref:System.Net.NetworkCredential> instance for the specified host, port, and authorization type. The `host`, `port`, and `authType` values passed to this method are case-insensitively compared to the values specified when the credential was added to the <xref:System.Net.CredentialCache> using the <xref:System.Net.CredentialCache.Add%2A> methods.  
  
 The supported values for `authType` are "NTLM", "Digest", "Kerberos", and "Negotiate".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="host" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="authType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="authType" /> not an accepted value. See Remarks.  
  
 -or-  
  
 <paramref name="host" /> is equal to the empty string ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> is less than zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can iterate through the <see cref="T:System.Net.CredentialCache" /> instance.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Net.CredentialCache" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example uses the GetEnumerator method to return an enumerator that can iterate through the <xref:System.Net.CredentialCache> instance.  
  
 [!code-cpp[CredentialCache_GetEnumerator#1](~/add/codesnippet/cpp/m-system.net.credentialc_0_1.cpp)]
 [!code-vb[CredentialCache_GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.net.credentialc_0_1.vb)]
 [!code-cs[CredentialCache_GetEnumerator#1](~/add/codesnippet/csharp/m-system.net.credentialc_0_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential is used for.</param>
        <param name="authType">The authentication scheme used by the host named in <c>uriPrefix</c>.</param>
        <summary>Deletes a <see cref="T:System.Net.NetworkCredential" /> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method removes a <xref:System.Net.NetworkCredential> instance from the <xref:System.Net.CredentialCache> if the specified URI prefix and authentication protocol match those associated with the credential. Multiple calls to the Remove method for the same <xref:System.Net.NetworkCredential> have no effect.  
  
 If `authType` is `null` or `uriPrefix` is `null`, or no matching credential is found in the cache, this method does nothing.  
  
   
  
## Examples  
 The following code example uses this method to delete a <xref:System.Net.NetworkCredential> instance from the cache.  
  
 [!code-cpp[CredentialCache_Add_Remove#3](~/add/codesnippet/cpp/m-system.net.credentialc_3_1.cpp)]
 [!code-vb[CredentialCache_Add_Remove#3](~/add/codesnippet/visualbasic/m-system.net.credentialc_3_1.vb)]
 [!code-cs[CredentialCache_Add_Remove#3](~/add/codesnippet/csharp/m-system.net.credentialc_3_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> that identifies the host computer.</param>
        <param name="port">A <see cref="T:System.Int32" /> that specifies the port to connect to on <c>host</c>.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> that identifies the authentication scheme used when connecting to <c>host</c>. See Remarks.</param>
        <summary>Deletes a <see cref="T:System.Net.NetworkCredential" /> instance from the cache if it is associated with the specified host, port, and authentication protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method removes a <xref:System.Net.NetworkCredential> instance from the <xref:System.Net.CredentialCache> if the specified host, port, and authentication protocol match those associated with the credential. Multiple calls to the Remove method for the same <xref:System.Net.NetworkCredential> have no effect.  
  
 If `authType` is `null` or `uriPrefix` is `null`, or no matching credential is found in the cache, this method does nothing.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>